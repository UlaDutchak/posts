{"version":3,"sources":["api/api.ts","components/Navigation/Navigation.tsx","components/Loader/Loader.tsx","components/NewCommentForm/NewCommenentForm.tsx","components/PostDetails/PostDetails.tsx","components/PostsList/PostsList.tsx","components/PostsPage/PostsPage.tsx","components/UpdatePost/UpdatePost.tsx","components/NewPost/NewPost.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getPostDetails","postId","fetch","then","response","ok","Error","json","Navigation","className","aria-current","to","Loader","role","NewCommentForm","props","addNewComment","useState","body","setBody","handleAddComment","event","preventDefault","name","placeholder","aria-label","value","onChange","target","handleCommentChange","type","onClick","PostDetails","selectedPostId","post","setPost","isCommentsVisible","setIsCommentVisible","loader","setLoader","useEffect","catch","reject","title","comments","map","comment","id","length","newComment","method","headers","JSON","stringify","addComment","PostsList","changePostId","posts","classNames","PostPage","selectedPostID","setSelectedPostID","path","exact","UpdatePost","setTitle","useParams","handleUpdatePost","updatedPost","updatePost","handleTitleChange","handleBodyChange","NewPosts","maxId","currentId","setCurrentId","handleAddPost","newPost","App","setPosts","Math","max","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ffd18e9.chunk.js","sourcesContent":["export const BASE_URL = 'https://simple-blog-api.crew.red/posts';\n\nexport const getAllPosts = ():Promise<Post[]> => {\n  return fetch(`${BASE_URL}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Error');\n      }\n\n      return response.json();\n    });\n};\n\nexport const getPostDetails = (postId: number):Promise<Post> => {\n  return fetch(`${BASE_URL}/${postId}?_embed=comments`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Error');\n      }\n\n      return response.json();\n    });\n};\n\nexport const addComment = (newComment: Partial<Comment>) => {\n  return fetch(`${BASE_URL}comments`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n};\n\nexport const addPost = (newPost: Post) => {\n  return fetch(`${BASE_URL}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newPost),\n  });\n};\n\nexport const updatePost = (updatedPost: Partial<Post>, postId: string) => {\n  return fetch(`${BASE_URL}/${postId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(updatedPost),\n  });\n};\n\nexport const deletePost = (postId: number) => {\n  return fetch(`${BASE_URL}/${postId}`, {\n    method: 'DELETE',\n  });\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navigation: React.FC = () => {\n  return (\n    <ul className=\"nav justify-content-center\">\n      <li className=\"nav-item\">\n        <NavLink\n          className=\"nav-link active\"\n          aria-current=\"page\"\n          to=\"/home\"\n        >\n          Home page\n        </NavLink>\n      </li>\n      <li className=\"nav-item\">\n        <NavLink\n          className=\"nav-link\"\n          to=\"/posts\"\n        >\n          All Posts\n        </NavLink>\n      </li>\n      <li className=\"nav-item\">\n        <NavLink\n          className=\"nav-link\"\n          to=\"/new\"\n        >\n          Add Post\n        </NavLink>\n      </li>\n    </ul>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => {\n  return (\n    <div className=\"spinner-border loader\" role=\"status\">\n      <span className=\"visually-hidden\">Загрузка...</span>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\ninterface Props {\n  postId: number;\n  addNewComment: (newComment: Partial<Comment>) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { postId, addNewComment } = props;\n  const [body, setBody] = useState('');\n\n  const reset = () => {\n    setBody('');\n  };\n\n  const handleCommentChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(event.target.value);\n  };\n\n  const handleAddComment = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n    addNewComment({\n      body,\n      postId,\n    });\n    reset();\n  };\n\n  return (\n    <form>\n\n      <div className=\"input-group mb-2\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"form-control\"\n          aria-label=\"With textarea\"\n          value={body}\n          onChange={(event) => handleCommentChange(event)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"btn btn-primary\"\n        value={body}\n        onClick={(event) => handleAddComment(event)}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { addComment, getPostDetails } from '../../api/api';\nimport { Loader } from '../Loader/Loader';\nimport { NewCommentForm } from '../NewCommentForm/NewCommenentForm';\n\ninterface Props {\n  selectedPostId: number;\n}\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const { selectedPostId } = props;\n  const [post, setPost] = useState({} as Post | null);\n  const [isCommentsVisible, setIsCommentVisible] = useState(true);\n  const [loader, setLoader] = useState(true);\n\n  useEffect(() => {\n    setLoader(true);\n\n    getPostDetails(selectedPostId)\n      .then(response => {\n        setPost(response as Post);\n        setLoader(false);\n      })\n      .catch(reject => {\n        setPost(null);\n        throw new Error(reject);\n      });\n  }, [selectedPostId]);\n\n  const addNewComment = (newComment: Partial<Comment>) => {\n    addComment(newComment)\n      .then(() => {\n        getPostDetails(selectedPostId);\n        setLoader(true);\n        setLoader(false);\n      });\n  };\n\n  const hideTriggerComments = () => {\n    setIsCommentVisible(!isCommentsVisible);\n  };\n\n  if (loader) {\n    return (\n      <Loader />\n    );\n  }\n\n  return (\n    <div className=\"container\">\n      <h2>Post details:</h2>\n\n      <div className=\"card mb-2\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{post?.title}</h5>\n          <p className=\"card-text\">{post?.body}</p>\n        </div>\n        <ul className=\"list-group list-group-flush\">\n          {isCommentsVisible && (\n            <>\n              {post?.comments?.map(comment => (\n                <li\n                  className=\"list-group-item\"\n                  key={comment.id}\n                >\n                  <p className=\"ps-2\">{comment.body}</p>\n                </li>\n              ))}\n            </>\n          )}\n        </ul>\n        <div className=\"card-body\">\n          <button\n            type=\"button\"\n            className=\"btn btn-info mb-4\"\n            onClick={() => hideTriggerComments()}\n          >\n            {isCommentsVisible ? 'Hide ' : 'Show '}\n            {`${post?.comments?.length} comments`}\n          </button>\n        </div>\n      </div>\n\n      <NewCommentForm\n        postId={selectedPostId}\n        addNewComment={addNewComment}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\nimport { deletePost } from '../../api/api';\n\ninterface Props {\n  changePostId: (postId: number) => void;\n  selectedPostId: number;\n  posts: Post[];\n}\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const {\n    changePostId,\n    selectedPostId,\n    posts,\n  } = props;\n\n  return (\n    <div className=\"container\">\n      <h2 className=\"title text-center\">\n        ALL Posts\n      </h2>\n      {posts.map(post => (\n        <div className=\"card mb-4\" key={post.id}>\n          <div className=\"card-header\">\n            Featured\n          </div>\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">{post.title}</h5>\n            <p className=\"card-text\">{post.body}</p>\n            <NavLink\n              to={`/posts/${post.id}`}\n              className={classNames(\n                'me-2',\n                // 'btn',\n                'btn btn-outline-success',\n                { 'btn btn-outline-success': selectedPostId === post.id },\n              )}\n              onClick={() => {\n                if (selectedPostId === post.id) {\n                  changePostId(0);\n                } else {\n                  changePostId(post.id);\n                }\n              }}\n            >\n              {selectedPostId === post.id ? 'Close' : 'Open'}\n            </NavLink>\n\n            <NavLink\n              to={`/update_post/${post.id}`}\n              className=\"btn btn-outline-warning me-2\"\n            >\n              Update\n            </NavLink>\n\n            <button\n              type=\"button\"\n              className=\"btn btn-outline-danger me-2\"\n              onClick={() => deletePost(post.id)}\n            >\n              Delete\n            </button>\n          </div>\n        </div>\n\n      ))}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Route } from 'react-router-dom';\nimport { Loader } from '../Loader/Loader';\nimport { PostDetails } from '../PostDetails/PostDetails';\nimport { PostsList } from '../PostsList/PostsList';\n\ninterface Props {\n  posts: Post[];\n  loader: boolean;\n}\n\nexport const PostPage: React.FC<Props> = (props) => {\n  const { posts, loader } = props;\n  const [selectedPostID, setSelectedPostID] = useState(0);\n\n  const changePostId = (postId: number) => {\n    setSelectedPostID(postId);\n  };\n\n  useEffect(() => {\n\n  }, [posts]);\n\n  return (\n    <div className=\"row align-items-start\">\n      <div className=\"col\">\n        {loader ? (\n          <>\n            {posts.length !== 0\n              ? (\n                <PostsList\n                  changePostId={changePostId}\n                  selectedPostId={selectedPostID}\n                  posts={posts}\n                />\n              )\n              : <h2>have any posts yet</h2>}\n          </>\n        )\n          : <Loader />}\n      </div>\n\n      <Route path=\"/posts/:postId\" exact>\n        {selectedPostID !== 0 && (\n          <div className=\"col-lg-5\">\n            <PostDetails selectedPostId={selectedPostID} />\n          </div>\n        )}\n      </Route>\n\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { NavLink, useParams } from 'react-router-dom';\nimport { updatePost } from '../../api/api';\n\nexport const UpdatePost: React.FC = () => {\n  const [body, setBody] = useState('');\n  const [title, setTitle] = useState('');\n\n  const { postId } = useParams<{postId: string}>() || '';\n\n  const reset = () => {\n    setTitle('');\n    setBody('');\n  };\n\n  const handleBodyChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(event.target.value);\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n  };\n\n  const handleUpdatePost = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n    updatePost({\n      title,\n      body,\n    }, postId);\n    reset();\n  };\n\n  return (\n    <form className=\"container\">\n      <h2 className=\"title text-center\">\n        Add your post\n      </h2>\n      <div className=\"input-group mb-2\">\n        <input\n          name=\"title\"\n          placeholder=\"Post title\"\n          className=\"form-control\"\n          value={title}\n          onChange={(event) => handleTitleChange(event)}\n        />\n      </div>\n\n      <div className=\"input-group mb-2\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type post here\"\n          className=\"form-control\"\n          value={body}\n          onChange={(event) => handleBodyChange(event)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"btn btn-primary me-2\"\n        onClick={(event) => handleUpdatePost(event)}\n      >\n        Update a post\n      </button>\n\n      <NavLink\n        to=\"/posts\"\n        className=\"btn btn-danger\"\n      >\n        Close\n      </NavLink>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { addPost } from '../../api/api';\n\ninterface Props {\n  maxId: number;\n}\n\nexport const NewPosts: React.FC<Props> = ({ maxId }) => {\n  const [currentId, setCurrentId] = useState(maxId);\n  const [body, setBody] = useState('');\n  const [title, setTitle] = useState('');\n\n  const reset = () => {\n    setCurrentId(currentId + 1);\n    setTitle('');\n    setBody('');\n  };\n\n  const handleBodyChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBody(event.target.value);\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n  };\n\n  const handleAddPost = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n    addPost({\n      id: currentId + 1,\n      title,\n      body,\n    });\n    reset();\n  };\n\n  return (\n    <form className=\"container\">\n      <h2 className=\"title text-center\">\n        Add your post\n      </h2>\n      <div className=\"input-group mb-2\">\n        <input\n          name=\"title\"\n          placeholder=\"Post title\"\n          className=\"form-control\"\n          value={title}\n          onChange={(event) => handleTitleChange(event)}\n        />\n      </div>\n\n      <div className=\"input-group mb-2\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type post here\"\n          className=\"form-control\"\n          value={body}\n          onChange={(event) => handleBodyChange(event)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"btn btn-primary\"\n        onClick={(event) => handleAddPost(event)}\n      >\n        Add a post\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { getAllPosts } from './api/api';\nimport { Navigation } from './components/Navigation/Navigation';\nimport { PostPage } from './components/PostsPage/PostsPage';\nimport { UpdatePost } from './components/UpdatePost/UpdatePost';\nimport { NewPosts } from './components/NewPost/NewPost';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState([] as Post[]);\n  const [loader, setLoader] = useState(false);\n\n  useEffect(() => {\n    setLoader(false);\n    getAllPosts()\n      .then(response => {\n        setPosts(response);\n        setLoader(true);\n      });\n  }, []);\n\n  const setMaxId = () => Math.max(...posts.map(post => post.id));\n\n  return (\n    <div className=\"App\">\n      <Navigation />\n      <Switch>\n\n        <Route path=\"/posts\">\n          <PostPage posts={posts} loader={loader} />\n        </Route>\n\n        <Route path=\"/new\">\n          <NewPosts maxId={setMaxId()} />\n        </Route>\n\n        <Route\n          path=\"/update_post/:postId\"\n          component={UpdatePost}\n        />\n\n        <Redirect path=\"/home\" to=\"/\" />\n\n      </Switch>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.scss';\nimport { App } from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}